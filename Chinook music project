--Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT FirstName, LastName, CustomerID, Country FROM customers WHERE Country <> 'USA';

--Show only the Customers from Brazil

SELECT FirstName, LastName, CustomerID, Country FROM customers WHERE Country = 'Brazil';

--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT customers.FirstName, customers.LastName, invoices.InvoiceId, invoices.InvoiceDate, invoices.BillingCountry 
FROM customers 
LEFT JOIN invoices on customers.CustomerId = invoices.CustomerId
WHERE customers.country = 'Brazil';


--Show the Employees who are Sales Agents.
SELECT FirstName, LastName, Title FROM employees WHERE title LIKE '%Sales%';

--Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT * FROM invoices GROUP BY billingCountry;

SELECT DISTINCT BIllingCountry FROM invoices ORDER BY BillingCountry ASC;

--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT emp.LastName, emp.Firstname, inv.InvoiceId
FROM Employees emp 
JOIN Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN Invoices Inv ON Inv.CustomerId = cust.CustomerId;

--Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT invoices.Total, customers.FirstName, customers.LastName, customers.Country, employees.FirstName, Employees.LastName 
FROM employees
JOIN customers on customers.SupportRepId = employees.EmployeeId
Join Invoices on Invoices.customerID = customers.customerId;


--How many Invoices were there in 2009?

SELECT count(invoices.InvoiceId) from invoices 
WHERE invoices.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';


--What are the total sales for 2009?

SELECT SUM(invoices.Total) 
FROM invoices
WHERE invoices.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

--Write a query that includes the purchased track name with each invoice line ID.

SELECT tracks.name, invoice_items.InvoiceId 
FROM tracks
JOIN invoice_items ON invoice_items.trackID = tracks.TrackId;

--Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT tracks.name Track, artists.name Artist, invoice_items.InvoiceId

FROM invoice_items
LEFT JOIN tracks
ON tracks.TrackId = invoice_items.TrackId
INNER JOIN albums
ON tracks.AlbumId = albums.AlbumId
LEFT JOIN artists
ON albums.ArtistId = artists.artistid;


--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT Tracks.Name Track, albums.title Album, media_types.Name "Media Type", genres.name Genre
FROM tracks
JOIN albums
ON tracks.AlbumId = albums.AlbumId
Join media_types
ON tracks.MediaTypeId = media_types.MediaTypeId
JOIN genres
ON tracks.GenreId = genres.genreid
;


--Show the total sales made by each sales agent.

SELECT ROUND(SUM(i.total), 2) as TotalSales, employees.LastName, employees.FirstName
FROM invoices i
JOIN customers
ON customers.customerid = i.CustomerId
JOIN employees
ON employees.EmployeeId = customers.SupportRepId
GROUP BY employees.LastName
;


-- Which sales agent made the most dollars in sales in 2009?

SELECT ROUND(SUM(i.total), 2) as TotalSales, employees.LastName, employees.FirstName
FROM invoices i
JOIN customers
ON customers.customerid = i.CustomerId
JOIN employees
ON employees.EmployeeId = customers.SupportRepId
WHERE i.InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31'
GROUP BY employees.LastName
ORDER BY TotalSales desc
;

--How do sales for products priced over ninety-nine cents sell compared to products priced at ninety-nine cents?
SELECT *
FROM tracks
where unitprice >1;

SELECT COUNT(i.invoiceid), SUM(i.total) 
FROM invoices i
JOIN invoice_items it
ON i.invoiceID = it.invoiceid
WHERE it.UnitPrice >.99;

SELECT COUNT(i.invoiceid), SUM(i.total) 
FROM invoices i
JOIN invoice_items it
ON i.invoiceID = it.invoiceid
WHERE it.UnitPrice <=.99;

SELECT
    CASE
        WHEN it.UnitPrice > .99 THEN 'Greater than 0.99'
        ELSE 'Less than or equal to 0.99'
    END AS PriceRange,
    COUNT(i.invoiceid) AS Count,
    SUM(i.total) AS Total
FROM
    invoices i
JOIN
    invoice_items it ON i.invoiceID = it.invoiceid
GROUP BY
    CASE
        WHEN it.UnitPrice > .99 THEN 'Greater than 0.99'
        ELSE 'Less than or equal to 0.99'
    END;

--Among sales over .99 per unit, what product sold the most? - unsatisfactory 8 way tie at 2

SELECT t.name, t.unitprice, count(it.trackid) as count, it.invoiceid
FROM invoice_items it
left JOIN tracks t
on t.trackid = it.trackid
where t.unitprice>.99
group by t.trackid
order by count desc
;

